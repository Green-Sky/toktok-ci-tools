on:
  workflow_call:
    inputs:
      project-name:
        description: 'Name of the application to build (e.g. qTox)'
        required: true
        type: string
      cmake-args:
        description: 'Arguments to pass to CMake'
        required: false
        type: string
      screenshot:
        description: |
          Whether the smoke-test will output a screenshot. If true, the
          screenshot will be uploaded as an artifact. The smoke-test script
          must output the screenshot to the file named by the
          $QTOX_SCREENSHOT environment variable.
        required: false
        type: boolean
      smoke-test:
        description: 'Command to run to smoke test the AppImage'
        required: true
        type: string
      test-files:
        description: |
          List of test files needed to checkout from the repository. If your
          smoke-test script is local to the repository, it needs to be
          listed here.
        required: false
        type: string

jobs:
  build:
    name: Build on Alpine
    strategy:
      matrix:
        arch: [x86_64]
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true
      - name: Fetch build scripts
        run: |
          git clone --depth=1 https://github.com/TokTok/dockerfiles "third_party/dockerfiles"
          cp third_party/dockerfiles/docker-compose.yml .
      - name: Determine artifact file name
        id: artifact
        run: |
          ARTIFACT="${{ inputs.project-name }}-$(git rev-parse --short HEAD | head -c7)-${{ matrix.arch }}.AppImage"
          echo "artifact=$ARTIFACT" >>$GITHUB_OUTPUT
          echo "artifact-ref=${{ inputs.project-name }}-${{ github.sha }}-appimage-${{ matrix.arch }}" >>$GITHUB_OUTPUT
      - name: Cache compiler output
        uses: actions/cache@v4
        with:
          path: .cache/ccache
          key: ${{ github.job }}-appimage-ccache
      - name: Download Docker image
        run: docker compose run --rm alpine-appimage uname -a
      - name: Run build
        run: docker compose run
          --rm
          -e GITHUB_REPOSITORY="$GITHUB_REPOSITORY"
          -e GITHUB_REF="$GITHUB_REF"
          alpine-appimage
          platform/appimage/build.sh
          --arch ${{ matrix.arch }}
          --src-dir /qtox
          --project-name ${{ inputs.project-name }}
          --
          ${{ inputs.cmake-args }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.artifact-ref }}
          path: |
            ${{ steps.artifact.outputs.artifact }}
            ${{ steps.artifact.outputs.artifact }}.sha256
            ${{ steps.artifact.outputs.artifact }}.zsync
          if-no-files-found: error
      - name: Get tag name for release file name
        if: contains(github.ref, 'refs/tags/v')
        id: get_version
        run: |
          VERSION="$(echo "$GITHUB_REF" | cut -d / -f 3)"
          echo "release_artifact=${{ inputs.project-name }}-$VERSION-${{ matrix.arch }}.AppImage" >>$GITHUB_OUTPUT
      - name: Rename artifact for release upload
        if: contains(github.ref, 'refs/tags/v')
        run: |
          cp "${{ steps.artifact.outputs.artifact }}"        "${{ steps.get_version.outputs.release_artifact }}"
          cp "${{ steps.artifact.outputs.artifact }}.sha256" "${{ steps.get_version.outputs.release_artifact }}.sha256"
          cp "${{ steps.artifact.outputs.artifact }}.zsync"  "${{ steps.get_version.outputs.release_artifact }}.zsync"
      - name: Upload to versioned release
        if: contains(github.ref, 'refs/tags/v')
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          draft: true
          artifacts: "${{ steps.get_version.outputs.release_artifact }},${{ steps.get_version.outputs.release_artifact }}.sha256,${{ steps.get_version.outputs.release_artifact }}.zsync"
      - name: Rename artifact for nightly upload
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          cp "${{ steps.artifact.outputs.artifact }}"        "${{ inputs.project-name }}-nightly-${{ matrix.arch }}.AppImage"
          cp "${{ steps.artifact.outputs.artifact }}.sha256" "${{ inputs.project-name }}-nightly-${{ matrix.arch }}.AppImage.sha256"
          cp "${{ steps.artifact.outputs.artifact }}.zsync"  "${{ inputs.project-name }}-nightly-${{ matrix.arch }}.AppImage.zsync"
      - name: Upload to nightly release
        uses: ncipollo/release-action@v1
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        with:
          allowUpdates: true
          tag: nightly
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          prerelease: true
          replacesArtifacts: true
          artifacts: "${{ inputs.project-name }}-nightly-${{ matrix.arch }}.AppImage,${{ inputs.project-name }}-nightly-${{ matrix.arch }}.AppImage.sha256,${{ inputs.project-name }}-nightly-${{ matrix.arch }}.AppImage.zsync"

  test:
    name: Test on Ubuntu
    needs: [build]
    strategy:
      matrix:
        arch: [x86_64]
    runs-on: ubuntu-22.04
    steps:
      - if: inputs.test-files
        uses: actions/checkout@v4
        with:
          # Fetch tags if we're not already in a tag build.
          fetch-tags: ${{ !contains(github.ref, 'refs/tags/v') }}
          sparse-checkout: ${{ inputs.test-files }}
      - name: Determine artifact file name
        id: artifact
        run: |
          ARTIFACT="${{ inputs.project-name }}-$(git rev-parse --short HEAD | head -c7)-${{ matrix.arch }}.AppImage"
          echo "artifact=$ARTIFACT" >>$GITHUB_OUTPUT
          echo "artifact-ref=${{ inputs.project-name }}-${{ github.sha }}-appimage-${{ matrix.arch }}" >>$GITHUB_OUTPUT
      - name: Download artifact from build step
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.artifact-ref }}
      - name: Run AppImage
        id: run
        run: |
          chmod +x ${{ steps.artifact.outputs.artifact }}
          ${{ inputs.smoke-test }} xvfb-run --auto-servernum ./${{ steps.artifact.outputs.artifact }}
          echo "screenshot=$QTOX_SCREENSHOT" >>$GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          QTOX_SCREENSHOT: ${{ inputs.screenshot && format('{0}-AppImage-{1}.png', inputs.project-name, matrix.arch) }}
      - name: Upload screenshot artifact
        if: inputs.screenshot
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.run.outputs.screenshot }}
          path: ${{ steps.run.outputs.screenshot }}
          if-no-files-found: error
      - name: Upload screenshot to nightly release
        if: inputs.screenshot && github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          tag: nightly
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          prerelease: true
          replacesArtifacts: true
          artifacts: ${{ steps.run.outputs.screenshot }}
