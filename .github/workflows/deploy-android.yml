on:
  workflow_call:
    inputs:
      project-name:
        description: 'Name of the application to build (e.g. qTox)'
        required: false
        type: string
      cmake-args:
        description: 'Arguments to pass to CMake'
        required: false
        type: string
      production:
        description: |
          Whether to upload the release to the GitHub release page, i.e.
          the Android build is of production quality. If false, the build
          will be uploaded to the nightly release page only.
        required: false
        type: boolean
        default: false

jobs:
  build:
    name: Build
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    strategy:
      matrix:
        arch: [armeabi-v7a, arm64-v8a]
        build-type: [Debug, Release]
        version: [6.2.4, 6.8.1]
        exclude:
          - arch: ${{ github.event_name == 'pull_request' && !contains(github.event.pull_request.labels.*.name, 'packaging') && 'armeabi-v7a' }}
          - build-type: ${{ (github.event_name == 'pull_request' && !contains(github.event.pull_request.labels.*.name, 'packaging') || contains(github.ref, 'refs/tags/v')) && 'Debug' }}
          - version: ${{ github.event_name == 'pull_request' && !contains(github.event.pull_request.labels.*.name, 'packaging') && '6.8.1' }}
    steps:
      - name: Install prerequisites
        run: sudo apt-get install -y --no-install-recommends pcregrep
      - name: Compute values for remaining steps
        id: computed
        run: |
          PROJECT_NAME="${{ inputs.project-name }}"
          if [ -z "$PROJECT_NAME" ]; then
            PROJECT_NAME="$(pcregrep -M -o1 'project\(\s*(\S+)' CMakeLists.txt)"
          fi
          ARTIFACT_TYPE="$(echo '${{ matrix.build-type }}' | tr '[:upper:]' '[:lower:]')"
          echo "artifact_type=$ARTIFACT_TYPE" >>$GITHUB_OUTPUT
          if [ "${{ matrix.version }}" == "6.2.4" ]; then
            SUFFIX="-android7"
            echo "built_apk=_build/android-build/build/outputs/apk/debug/android-build-debug.apk" >>$GITHUB_OUTPUT
          else
            SUFFIX=""
            echo "built_apk=_build/android-build/build/outputs/apk/$ARTIFACT_TYPE/android-build-$ARTIFACT_TYPE-signed.apk" >>$GITHUB_OUTPUT
          fi
          echo "suffix=$SUFFIX" >>$GITHUB_OUTPUT
          echo "nightly_apk=$PROJECT_NAME-nightly-${{ matrix.arch }}-$ARTIFACT_TYPE$SUFFIX.apk" >>$GITHUB_OUTPUT
          echo "docker_image=android_builder.${{ matrix.arch }}.${ARTIFACT_TYPE}_${{ matrix.version }}" >>$GITHUB_OUTPUT
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true
      - name: Checkout ci-tools
        uses: actions/checkout@v4
        with:
          repository: TokTok/ci-tools
          path: ci-tools
      - name: Fetch build scripts
        run: |
          git clone --depth=1 https://github.com/TokTok/dockerfiles "third_party/dockerfiles"
          cp third_party/dockerfiles/docker-compose.yml .
      - name: Determine artifact file name
        id: artifact
        run: |
          ARTIFACT="${{ steps.computed.outputs.built_apk }}"
          echo "artifact=$ARTIFACT" >>$GITHUB_OUTPUT
          echo "artifact-ref=${{ steps.computed.outputs.project-name }}-${{ github.sha }}-android-${{ matrix.arch }}-${{ matrix.build-type }}-${{ matrix.version }}" >>$GITHUB_OUTPUT
      - name: Cache compiler output
        uses: actions/cache@v4
        with:
          path: .cache/ccache
          key: ${{ github.job }}-android-${{ matrix.arch }}-${{ matrix.build-type }}-${{ matrix.version }}-ccache
      - name: Download Docker image
        run: docker compose run --rm ${{ steps.computed.outputs.docker_image }} uname -a
      - name: Run build
        run: docker compose run
          --rm
          ${{ steps.computed.outputs.docker_image }}
          platform/android/cross-compile/build.sh
          --arch ${{ matrix.arch }}
          --build-type ${{ matrix.build-type }}
          --
          ${{ inputs.cmake-args }}
      - name: Generate sha256 checksum
        id: sha256
        run: ci-tools/tools/artifact_sha256.py
          "${{ steps.computed.outputs.project-name }}"
          ${{ steps.computed.outputs.built_apk }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.artifact-ref }}
          path: ${{ steps.sha256.outputs.artifacts }}
          if-no-files-found: error
      - name: Get tag name for Android release file name
        if: contains(github.ref, 'refs/tags/v')
        id: get_version
        run: |
          VERSION="$(echo "$GITHUB_REF" | cut -d / -f 3)"
          echo "release_apk=${{ steps.computed.outputs.project-name }}-$VERSION-${{ matrix.arch }}-${{ steps.computed.outputs.artifact_type }}${{ steps.computed.outputs.suffix }}.apk" >>$GITHUB_OUTPUT
      - name: Rename Android APK for release upload
        if: contains(github.ref, 'refs/tags/v')
        run: |
          cp "${{ steps.computed.outputs.built_apk }}"        "${{ steps.get_version.outputs.release_apk }}"
          cp "${{ steps.computed.outputs.built_apk }}.sha256" "${{ steps.get_version.outputs.release_apk }}.sha256"
      - name: Upload to versioned release
        if: inputs.production && contains(github.ref, 'refs/tags/v')
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          draft: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "${{ steps.get_version.outputs.release_apk }},${{ steps.get_version.outputs.release_apk }}.sha256"
      - name: Rename Android APK for nightly upload
        run: |
          cp "${{ steps.computed.outputs.built_apk }}"        "${{ steps.computed.outputs.nightly_apk }}"
          cp "${{ steps.computed.outputs.built_apk }}.sha256" "${{ steps.computed.outputs.nightly_apk }}.sha256"
      - name: Upload to nightly release
        uses: ncipollo/release-action@v1
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        with:
          allowUpdates: true
          tag: nightly
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          prerelease: true
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "${{ steps.computed.outputs.nightly_apk }},${{ steps.computed.outputs.nightly_apk }}.sha256"
